# Broken out from .zsh_aliases
# BMF - 260520

# ##################################################################
# Functions
# ##################################################################
# ##################################################################
# Ansible
# ##################################################################

# ##################################################################
# 
## find-in-file - usage: fif <SEARCH_TERM>
fif() {
  if [ ! "$#" -gt 0 ]; then
    echo "Need a string to search for!";
    return 1;
  fi
  rg --files-with-matches --no-messages "$1" | fzf $FZF_PREVIEW_WINDOW --preview "rg --ignore-case --pretty --context 10 '$1' {}"
} ##################################################################
testcron() { # test crontab entries for errors
 crontab -l | grep -v '^#' | cut -f 6- -d ' ' | while read CMD; do eval $CMD; done
}

seekkill () { # find and kill process by name with fzf
		ps aux | fzf | awk '{print $2}' | xargs kill -9
}

old() { # Backup a file with the extension '.old'
	   	cp --reflink=auto "${1}"{,.old} 2>/dev/null || cp "${1}"{,.old}; 
}
get_command() {  # Functionalise 'command -v' to allow 'if get_command [command]' idiom
		command -v "${1}" &>/dev/null; 
}

printline() {
  # If $1 is empty, print a usage message
  if [[ -z $1 ]]; then
    printf "%s\n" "printline"
    printf "\t%s\n" "This function prints a specified line from a file" \
      "Usage: 'printline line-number file-name'"
    return 1
  fi

  # Check that $1 is a number
  case $1 in
    ''|*[!0-9]*)  printf "%s\n" "[ERROR] printline: '$1' does not appear to be a number." \
                    "Usage: printline line-number file-name";
                  return 1 ;;
    *)            local lineNo="$1" ;;
  esac
  
  # Next, check that $2 is a file that exists
  if [[ ! -f "$2" ]]; then
    printf "%s\n" "[ERROR] printline: '$2' does not appear to exist or I can't read it." \
      "Usage: printline line-number file-name"
    return 1
  else
    local file="$2"
  fi

  # Desired line must be less than the number of lines in the file
  local fileLength
  fileLength=$(grep -c . "${file}")
  if [[ "${lineNo}" -gt "${fileLength}" ]]; then
    printf "%s\n" "[ERROR] printline: '${file}' is ${fileLength} lines long." \
      "You want line number '${lineNo}'.  Do you see the problem here?"
    return 1
  fi

  # Finally after all that testing is done...
  # We try for 'sed' first as it's the fastest way to do this on massive files
  if command -v sed &>/dev/null; then
    sed -n "${lineNo}{p;q;}" < "${file}"
  # Otherwise we try a POSIX-esque use of 'head | tail'
  else
    head -n "${lineNo}" "${file}" | tail -n 1
  fi
}
fuzzpass() { # fuzzy password searching
    local arg
	arg=$1
	if [ -z $# eq 0 "$arg" ]; then
			echo "password | secret key | totp"
	fi
	# if [ -z $arg ]; then
	# 		echo "password | secret key | totp"
	# 		exit 1
	# fi
    local item
    item=$(1pass | fzf);
	echo "$item"
    1pass -p "$item" "$arg"
}

tm () { # switch between tmux sessions or create new if not
		# usage: tm <name/number>
		#
	[[ -n "$TMUX" ]] && change="switch-client"  || change="attach-session" 
	if [ $1 ]
	then
		tmux $change -t "$1" 2> /dev/null || (
			tmux new-session -d -s $1 && tmux $change -t "$1"
		)
		return
	fi
	session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0)  && tmux $change -t "$session" || echo "No sessions found."
}

tkillpane () { #kill tmux panes by number
		local inst=$(tmux list-panes | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[tmux:kill-pane]'")
		if [[ -n $inst ]]
		then
				for pane in $(echo $inst)
				do
						killpane=$(echo $pane | awk '{ print $1 }' | sed -e 's/\://g')
						tmux kill-pane -t "$killpane" 2> /dev/null
				done
		fi
}

function _calcram() { #used for ram and rams
    local sum
    sum=0
    for i in `ps aux | grep -i "$1" | grep -v "grep" | awk '{print $6}'`; do
        sum=$(($i + $sum))
    done
    sum=$(echo "scale=2; $sum / 1024.0" | bc)
    echo $sum
}

function ram() { #shows ram usages by specified process
    local sum
    local app="$1"
    if [ -z "$app" ]; then
        echo "First argument - pattern to grep from processes"
        return 0
    fi
    sum=$(_calcram $app)
    if [[ $sum != "0" ]]; then
        echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM"
    else
        echo "No active processes matching pattern '${fg[blue]}${app}${reset_color}'"
    fi
}

function rams() { # ongoing ram usage
    local sum
    local app="$1"
    if [ -z "$app" ]; then
        echo "First argument - pattern to grep from processes"
        return 0
    fi

    while true; do
        sum=$(_calcram $app)
        if [[ $sum != "0" ]]; then
                echo -en "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM\r"
        else
                echo -en "No active processes matching pattern '${fg[blue]}${appt}${reset_color}'\r"
        fi
        sleep 1
  done
}

fzf_alias() { # for existing aliases
  alias | tr = "\t" | fzf | cut -f 1
} 

# -------------------------------------------------------------------
# compressed file expander
# (from https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh)
# -------------------------------------------------------------------
ex() { # compressed file expander
    if [[ -f $1 ]]; then
        case $1 in
          *.tar.bz2) tar xvjf $1;;
          *.tar.gz) tar xvzf $1;;
          *.tar.xz) tar xvJf $1;;
          *.tar.lzma) tar --lzma xvf $1;;
          *.bz2) bunzip $1;;
          *.rar) unrar $1;;
          *.gz) gunzip $1;;
          *.tar) tar xvf $1;;
          *.tbz2) tar xvjf $1;;
          *.tgz) tar xvzf $1;;
          *.zip) unzip $1;;
          *.Z) uncompress $1;;
          *.7z) 7z x $1;;
          *.dmg) hdiutil mount $1;; # mount OS X disk images
          *) echo "'$1' cannot be extracted via >ex<";;
    esac
    else
        echo "'$1' is not a valid file"
    fi
}

### BREW + FZF
# update multiple packages at once
# mnemonic [B]rew [U]pdate [P]lugin

bip () { # install brew packages
local inst=$(brew formulae | eval "fzf ${FZF_BREW_OPTS} -m --header='[brew:install]'")

if [[ $inst ]]; then
  for prog in $(echo $inst)
  do brew install $prog
  done
fi
}

bup () { ### BREW + FZF # update multiple packages at once, async

local upd=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:update]'")

if [[ $upd ]]; then
  for prog in $(echo $upd)
  do brew upgrade $prog
  done
fi
}

bcp () {	### BREW + FZF # mnemonic [B]rew [U]ninstall [P]lugin

local uninst=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:clean]'")

if [[ $uninst ]]; then
  for prog in $(echo $uninst)
  do brew uninstall $prog
  done
fi
}

### BREW CASK + FZF
# Install or open the webpage for the selected application 
# using brew cask search as input source
# and display a info quickview window for the currently marked application
install-cask() {
    local token
    token=$(brew formulae --casks | fzf-tmux --query="$1" +m --preview 'brew cask info {}')

    if [ "x$token" != "x" ]
    then
        echo "(I)nstall or open the (h)omepage of $token"
        read input
        if [ $input = "i" ] || [ $input = "I" ]; then
            brew cask install $token
        fi
        if [ $input = "h" ] || [ $input = "H" ]; then
            brew cask home $token
        fi
    fi
}
# Uninstall or open the webpage for the selected application 
# using brew list as input source (all brew cask installed applications) 
# and display a info quickview window for the currently marked application
uninstall-cask() {
    local token
    token=$(brew cask list | fzf-tmux --query="$1" +m --preview 'brew cask info {}')

    if [ "x$token" != "x" ]
    then
        echo "(U)ninstall or open the (h)omepage of $token"
        read input
        if [ $input = "u" ] || [ $input = "U" ]; then
            brew cask uninstall $token
        fi
        if [ $input = "h" ] || [ $token = "h" ]; then
            brew cask home $token
        fi
    fi
}
four-line-search() {
  grep -Rnw . -e "$1" 2>/dev/null -A4 | more
}

new-ticket() {
  # Prompt the user for a JIRA ticket number
  read -r "ticketnumber?Enter JIRA ticket number: "

  # Error if no ticket number is provided
  if [ -z "$ticketnumber" ]; then
    echo "[ERROR] No JIRA ticket number provided."
    return 1
  fi

  # Define the target directory
  target_dir="/Users/celticlich/git/workfiles/tylertech/$ticketnumber"

  # Check if the directory already exists
  if [ -d "$target_dir" ]; then
    echo "[ERROR] Directory for ticket $ticketnumber already exists at: $target_dir"
    return 1
  fi

  # Create the directory since it doesn't exist
  mkdir -p "$target_dir"

  # Create a notes file in the new directory
  notes_file="$target_dir/$ticketnumber.txt"
  if [ ! -f "$notes_file" ]; then
    touch "$notes_file"
    echo "Notes for $ticketnumber" > "$notes_file"
    echo "Created on $(date)" >> "$notes_file"
    echo >> "$notes_file"
  fi

  echo "Directory and notes file successfully created at: $target_dir"
}
rfv() (
  RELOAD='reload:rg --column --color=always --smart-case {q} || :'
  OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
            vim {1} +{2}     # No selection. Open the current line in Vim.
          else
            vim +cw -q {+f}  # Build quickfix list for the selected items.
          fi'
  fzf --disabled --ansi --multi \
      --bind "start:$RELOAD" --bind "change:$RELOAD" \
      --bind "enter:become:$OPENER" \
      --bind "ctrl-o:execute:$OPENER" \
      --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
      --delimiter : \
      --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
      --preview-window '~4,+{2}+4/3,<80(up)' \
      --query "$*"
)
