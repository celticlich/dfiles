# ##################################################################
# Aliases
# ##################################################################

alias reload='source ~/.zshrc'
alias tkp='tkillpane'
alias authy='open /Applications/Authy\ Desktop.app'
alias ll='ls -alhG'
alias jj='mac'
alias arping='sudo arping'
alias gotosleep='pmset sleepnow'
alias edit='vi ~/.zshrc'
alias softwareupdate='sudo softwareupdate'
alias attach='tmuxp load saved'
alias wireless='networksetup -setairportpower en1 '$1''
alias shr='netstat -nr'
alias vi='nvim'
alias extip='wget ipinfo.io/ip -qO -'
alias psaux='ps aux | ccze -A -o nolookups'
alias brewup='brew update && brew upgrade'
alias pscpu='ps aux | sort -nr -k 3'
alias pscpu10='ps aux | sort -nr -k 3 | head -10'
alias psmem='ps aux | sort -nr -k 4'
alias psmem10='ps aux | sort -nr -k 4 | head -10'
alias busy='cat /dev/urandom | hexdump -C | grep "ca fe"'
alias dockip='docker container inspect --format "{{ .NetworkSettings.IPAddress }}" $1'
alias dcl='docker container ls'
alias dcla='docker container ls -a'
alias dcs='docker container start $1'
alias dcst='docker container stop $1'
alias b='~/scripts/b.rb'


# #####################################################################
# git aliases
# #####################################################################

alias status='git status'
alias pull='git pull'
# #####################################################################
# Spotify Aliases
# #####################################################################
alias play='spotify play'
alias spop='spotify open'
alias spinfo='spotify info'
alias mute='spotify mute'
alias back='spotify back'
alias next='spotify next'
alias unmute='spotify unmute'
alias lyrics='spotify lyrics'

# ##################################################################
# Functions
# ##################################################################
#!/usr/bin/env bash
#
# -*- shell-script -*-
#
# Use fzf (https://github.com/junegunn/fzf) to rapidly select an account,
# and run 1pass (with optional argument) on the result.
# To use this, source this file in your .bashrc or .profile as appropriate,
# e.g.
#
# source fuzzpass.sh
#

fuzzpass() { # fuzzy password searching
    local arg
	arg=$1
	if [ -z $# eq 0 "$arg" ]; then
			echo "password | secret key | totp"
	fi
	# if [ -z $arg ]; then
	# 		echo "password | secret key | totp"
	# 		exit 1
	# fi
    local item
    item=$(1pass | fzf);
	echo "$item"
    1pass -p "$item" "$arg"
}

tm () { # switch between tmux sessions or create new if not
		# usage: tm <name/number>
		#
	[[ -n "$TMUX" ]] && change="switch-client"  || change="attach-session" 
	if [ $1 ]
	then
		tmux $change -t "$1" 2> /dev/null || (
			tmux new-session -d -s $1 && tmux $change -t "$1"
		)
		return
	fi
	session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0)  && tmux $change -t "$session" || echo "No sessions found."
}

function notify { #notify from terminal
		terminal-notifier -title "$1" -message "$2" 
}

function piadd() { #add A record to pihole config for logging
		ymir -t "pihole -a -r $1 $2" }
function pistatus() { #show pihole status
		ymir -t "pihole status" }
function piupdate() { # update pihole instance
		ymir -t "pihole --up" }

tkillpane () { #kill tmux panes by number
		local inst=$(tmux list-panes | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[tmux:kill-pane]'")
		if [[ -n $inst ]]
		then
				for pane in $(echo $inst)
				do
						killpane=$(echo $pane | awk '{ print $1 }' | sed -e 's/\://g')
						tmux kill-pane -t $killpane
				done
		fi
}
function _calcram() { #used for ram and rams
    local sum
    sum=0
    for i in `ps aux | grep -i "$1" | grep -v "grep" | awk '{print $6}'`; do
        sum=$(($i + $sum))
    done
    sum=$(echo "scale=2; $sum / 1024.0" | bc)
    echo $sum
}

function ram() { #shows ram usages by specified process
    local sum
    local app="$1"
    if [ -z "$app" ]; then
        echo "First argument - pattern to grep from processes"
        return 0
    fi
    sum=$(_calcram $app)
    if [[ $sum != "0" ]]; then
        echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM"
    else
        echo "No active processes matching pattern '${fg[blue]}${app}${reset_color}'"
    fi
}

function rams() { # ongoing ram usage
    local sum
    local app="$1"
    if [ -z "$app" ]; then
        echo "First argument - pattern to grep from processes"
        return 0
    fi

    while true; do
        sum=$(_calcram $app)
        if [[ $sum != "0" ]]; then
                echo -en "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM\r"
        else
                echo -en "No active processes matching pattern '${fg[blue]}${appt}${reset_color}'\r"
        fi
        sleep 1
  done
}

fzf_alias() { # for existing aliases
  alias | tr = "\t" | fzf | cut -f 1
} 


e () { # browse edge history
        local cols sep
        cols=$(( COLUMNS / 3 ))
        sep='{::}'
        cp -f ~/Library/Application\ Support/Microsoft\ Edge/Default/History /tmp/h
        sqlite3 -separator $sep /tmp/h "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" | awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' | fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

c() { #browse chrome history
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

# -------------------------------------------------------------------
# compressed file expander
# (from https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh)
# -------------------------------------------------------------------
ex() { # compressed file expander
    if [[ -f $1 ]]; then
        case $1 in
          *.tar.bz2) tar xvjf $1;;
          *.tar.gz) tar xvzf $1;;
          *.tar.xz) tar xvJf $1;;
          *.tar.lzma) tar --lzma xvf $1;;
          *.bz2) bunzip $1;;
          *.rar) unrar $1;;
          *.gz) gunzip $1;;
          *.tar) tar xvf $1;;
          *.tbz2) tar xvjf $1;;
          *.tgz) tar xvzf $1;;
          *.zip) unzip $1;;
          *.Z) uncompress $1;;
          *.7z) 7z x $1;;
          *.dmg) hdiutil mount $1;; # mount OS X disk images
          *) echo "'$1' cannot be extracted via >ex<";;
    esac
    else
        echo "'$1' is not a valid file"
    fi
}

### BREW + FZF
# update multiple packages at once
# mnemonic [B]rew [U]pdate [P]lugin

bip () { # install brew packages
local inst=$(brew search | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:install]'")

if [[ $inst ]]; then
  for prog in $(echo $inst)
  do brew install $prog
  done
fi
}

bup () { ### BREW + FZF # update multiple packages at once, async

local upd=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:update]'")

if [[ $upd ]]; then
  for prog in $(echo $upd)
  do brew upgrade $prog
  done
fi
}

bcp () {	### BREW + FZF # mnemonic [B]rew [U]ninstall [P]lugin

local uninst=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:clean]'")

if [[ $uninst ]]; then
  for prog in $(echo $uninst)
  do brew uninstall $prog
  done
fi
}
